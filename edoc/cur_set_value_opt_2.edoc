%% Notice: This file is auto-generated from 'doc/skel/func_docs.skel'
@doc 
Calls /rpc/cur_set_value<p/>

Sets the value of the record located at the cursor. Set 'step' to true
for the cursor to step to an adjacent record after the value is
set. This function can also interact with the server's signaling
mechanism with the optional 'wait', 'waittime', 'signal', and
'signalbroad' parameters.

```
% example:

1> kterl:set_bulk(Pid,[{"key1","val1"},{"key2","val2"},{"key3","val3"}]).
...
2> Cursor = kterl:cursor(Pid).
...
3> ok = kterl:cur_jump(Cursor, [{key, "key2"}]).
ok
4> kterl_result:get_value(kterl:cur_get_value(Cursor)).
<<"val2">>
5> {ok,Res} = kterl:cur_set_value_opt(Cursor, [{step, true}, {value, "new val2"}, {signal, "cursor_set"}]).
{ok, ...}
6> kterl_result:get_signaled_count(Res).
0
7> kterl_result:get_value(kterl:cur_get_value(Cursor)).
<<"val3">>
8> ok = kterl:cur_step_back(Cursor).
ok
9> kterl_result:get_value(kterl:cur_get_value(Cursor)).
<<"new val2">>
'''

<p/>On success cur_set_value_opt/2 will return <code>{ok, Result}</code>. The <code>Result</code> can then be passed to the following function(s) to access:<p/>```
kterl_result:get_signaled_count(Result).  % The number of clients signaled (if 'signal' was passed to the call.)

'''
@see cursor/1
@see cur_set_value/1
@see cur_set_value/2
@see cur_set_value/3
@see cur_set_value_opt/2


