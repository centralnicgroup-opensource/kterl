%% Notice: This file is auto-generated from 'doc/skel/func_docs.skel'
@doc
Calls /rpc/cur_get_key<p/>

Retrieves the key of the record located at the cursor. If 'step' is
set to true, the server will reposition the cursor to an adjacent
record after the key is retrieved.

```
% example:

1> kterl:set_bulk(Pid,[{"key1","val1"},{"key2","val2"},{"key3","val3"}]).
...
2> Cursor = kterl:cursor(Pid).
...
3> ok = kterl:cur_jump(Cursor).
ok
4> {ok, Res} = kterl:cur_get_key(Cursor, true).
{ok, ...}
5> kterl_result:get_key(Res).
<<"key1">>
6> kterl_result:get_key(kterl:cur_get_key(Cursor, true)).
<<"key2">>
6> ok = kterl:cur_jump_back(Cursor).
ok
7> kterl_result:get_key(kterl:cur_get_key(Cursor, true)).
<<"key3">>
8> kterl_result:get_key(kterl:cur_get_key(Cursor, true)).
<<"key2">>
9> kterl_result:get_key(kterl:cur_get_key(Cursor, true)).
<<"key1">>
10> kterl_result:get_key(kterl:cur_get_key(Cursor, true)).
{error,invalid_cursor}
'''
<p/>On success cur_get_key/2 will return <code>{ok, Result}</code>. The <code>Result</code> can then be passed to the following function(s) to access:<p/>```
kterl_result:get_key(Result).             % The record's key.

'''
@see cursor/1
@see cur_get_key/1
@see cur_get_key/3

